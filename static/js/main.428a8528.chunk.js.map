{"version":3,"sources":["pages/onload-sequence.js","pages/toggle-sequence.js","pages/number-count.js","pages/scripted-sequence.js","pages/chained-sequence.js","pages/trails-sequence.js","App.js","serviceWorker.js","index.js"],"names":["OnLoadVisibility","animProp_onLoadSequence","useSpring","from","opacity","transform","delay","config","mass","tension","friction","div","style","className","ToggleSequence","useState","toggle","setToggle","animProp_button","backgroundColor","gentle","animProp_toggleSequence","button","onClick","NumberCount","animProp_numberCount","number","molasses","h1","interpolate","val","toFixed","ScriptedSequence","animProp_scriptedSequence","to","next","a","ChainedSequence","animProp_chainedSequence","Trails","triggerAnimation","setTriggerAnimation","arrayOfWords","split","useTrail","length","map","prop","index","li","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.428a8528.chunk.js","sourcesContent":["import React from 'react';\nimport { useSpring, animated } from 'react-spring';\n\nconst OnLoadVisibility = () => {\n    const animProp_onLoadSequence = useSpring({\n        from: { opacity: 0, transform: `translateY(-24px)` },\n        opacity: 1,\n        transform: `translateY(0)`,\n        delay: 1000,\n        config: { mass: 1, tension: 500, friction: 20 },\n    });\n\n    return (\n        <main>\n            <header>\n                <p>On Load Sequence</p>\n            </header>\n\n            <article>\n                <section>\n                    <animated.div style={animProp_onLoadSequence}>\n                        <h1>Hello World!</h1>\n                    </animated.div>\n                </section>\n\n                <footer>\n                    <span className=\"pill\">On Load</span>\n                </footer>\n            </article>\n        </main>\n    );\n};\n\nexport default OnLoadVisibility;\n","import React, { useState } from 'react';\nimport { useSpring, animated, config } from 'react-spring';\n\nconst ToggleSequence = () => {\n    const [toggle, setToggle] = useState(false);\n\n    const animProp_button = useSpring({\n        backgroundColor: toggle ? '#de4383' : '#774898',\n        config: config.gentle,\n    });\n\n    const animProp_toggleSequence = useSpring({\n        backgroundColor: toggle ? `#de4383` : `#00a8b5`,\n        transform: `translateX(${toggle ? '96px' : '-96px'})`,\n        config: { mass: 1, tension: 500, friction: 50 },\n    });\n\n    return (\n        <main>\n            <header>\n                <p>Toggle Sequence</p>\n            </header>\n\n            <article>\n                <section>\n                    <animated.div\n                        style={animProp_toggleSequence}\n                        className=\"ball\"\n                    ></animated.div>\n                </section>\n\n                <footer>\n                    <animated.button\n                        style={animProp_button}\n                        onClick={() => {\n                            setToggle(!toggle);\n                        }}\n                    >\n                        {toggle ? '<' : '>'}\n                    </animated.button>\n                </footer>\n            </article>\n        </main>\n    );\n};\n\nexport default ToggleSequence;\n","import React, { useState } from 'react';\nimport { useSpring, animated, config } from 'react-spring';\n\nconst NumberCount = () => {\n    const [toggle, setToggle] = useState(false);\n\n    const animProp_button = useSpring({\n        backgroundColor: toggle ? '#de4383' : '#774898',\n        config: config.gentle,\n    });\n\n    const animProp_numberCount = useSpring({\n        number: toggle ? 1 : 0,\n        from: { number: !toggle ? 0 : 1 },\n        config: config.molasses,\n    });\n\n    return (\n        <main>\n            <header>\n                <p>Number Count</p>\n            </header>\n\n            <article>\n                <section>\n                    <animated.h1>\n                        {animProp_numberCount.number.interpolate(\n                            (val) => `${val.toFixed(2)}`\n                        )}\n                    </animated.h1>\n                </section>\n                <footer>\n                    <animated.button\n                        style={animProp_button}\n                        onClick={() => {\n                            setToggle(!toggle);\n                        }}\n                    >\n                        {toggle ? '-' : '+'}\n                    </animated.button>\n                </footer>\n            </article>\n        </main>\n    );\n};\n\nexport default NumberCount;\n","import React from 'react';\nimport { useSpring, animated } from 'react-spring';\n\nconst ScriptedSequence = () => {\n    const animProp_scriptedSequence = useSpring({\n        from: { backgroundColor: '#774898', transform: `translateX(-150px)` },\n        to: async (next) => {\n            while (true) {\n                await next({\n                    backgroundColor: '#00a8b5',\n                    transform: `translateX(-50px)`,\n                });\n                await next({\n                    backgroundColor: '#de4383',\n                    transform: `translateX(50px)`,\n                });\n                await next({\n                    backgroundColor: '#f3ae4b',\n                    transform: `translateX(150px)`,\n                });\n                await next({\n                    backgroundColor: '#774898',\n                    transform: `translateX(-150px)`,\n                });\n            }\n        },\n        config: { mass: 10, tension: 500, friction: 75 },\n    });\n\n    return (\n        <main>\n            <header>\n                <p>Scripted Sequence</p>\n            </header>\n\n            <article>\n                <section>\n                    <animated.div\n                        style={animProp_scriptedSequence}\n                        className=\"box\"\n                    ></animated.div>\n                </section>\n\n                <footer>\n                    <div className=\"pill\">\n                        <strong>Scripted</strong>\n                        <span>Code Example Only</span>\n                    </div>\n                </footer>\n            </article>\n        </main>\n    );\n};\n\nexport default ScriptedSequence;\n","import React from 'react';\nimport { useSpring, animated } from 'react-spring';\n\nconst ChainedSequence = () => {\n    const animProp_chainedSequence = useSpring({\n        from: { backgroundColor: '#774898', transform: `translateX(-150px)` },\n        to: [\n            {\n                backgroundColor: '#00a8b5',\n                transform: `translateX(-50px)`,\n            },\n            {\n                backgroundColor: '#de4383',\n                transform: `translateX(50px)`,\n            },\n            {\n                backgroundColor: '#f3ae4b',\n                transform: `translateX(150px)`,\n            },\n            {\n                backgroundColor: '#774898',\n                transform: `translateX(-150px)`,\n            },\n        ],\n        config: { mass: 10, tension: 500, friction: 75 },\n    });\n\n    return (\n        <main>\n            <header>\n                <p>Chained Sequence</p>\n            </header>\n\n            <article>\n                <section>\n                    <animated.div\n                        style={animProp_chainedSequence}\n                        className=\"box\"\n                    ></animated.div>\n                </section>\n\n                <footer>\n                    <div className=\"pill\">\n                        <strong>Chained</strong>\n                        <span>Code Example Only</span>\n                    </div>\n                </footer>\n            </article>\n        </main>\n    );\n};\n\nexport default ChainedSequence;\n","import React, { useState } from 'react';\nimport { useSpring, useTrail, animated, config } from 'react-spring';\n\nconst Trails = () => {\n    const [triggerAnimation, setTriggerAnimation] = useState(false);\n\n    const arrayOfWords = 'Lorem ipsum dolor sit amet'.split(' ');\n\n    const animProp_button = useSpring({\n        backgroundColor: triggerAnimation ? '#de4383' : '#774898',\n        config: config.gentle,\n    });\n\n    const animProp_onLoadSequence = useTrail(arrayOfWords.length, {\n        opacity: triggerAnimation ? 1 : 0,\n        transform: `translateX(${triggerAnimation ? '0px' : '-24px'}) `,\n        config: { mass: 1, tension: 500, friction: 28 },\n    });\n\n    return (\n        <main>\n            <header>\n                <p>Trails</p>\n            </header>\n\n            <article>\n                <section>\n                    <ul>\n                        {animProp_onLoadSequence.map((prop, index) => {\n                            return (\n                                <animated.li style={prop} key={index}>\n                                    {arrayOfWords[index]}\n                                </animated.li>\n                            );\n                        })}\n                    </ul>\n                </section>\n\n                <footer>\n                    <animated.button\n                        style={animProp_button}\n                        onClick={() => {\n                            setTriggerAnimation(!triggerAnimation);\n                        }}\n                    >\n                        {triggerAnimation ? 'Hide' : 'Show'}\n                    </animated.button>\n                </footer>\n            </article>\n        </main>\n    );\n};\n\nexport default Trails;\n","import React from 'react';\nimport OnLoadSequence from './pages/onload-sequence.js';\nimport ToggleSequence from './pages/toggle-sequence.js';\nimport NumberCount from './pages/number-count.js';\nimport ScriptedSequence from './pages/scripted-sequence.js';\nimport ChainedSequence from './pages/chained-sequence.js';\nimport Trails from './pages/trails-sequence.js';\n\nimport './modern-normalize.css';\nimport './App.css';\n\nfunction App() {\n    return (\n        <>\n            <OnLoadSequence />\n            <ToggleSequence />\n            <NumberCount />\n            <Trails />\n            <ScriptedSequence />\n            <ChainedSequence />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}